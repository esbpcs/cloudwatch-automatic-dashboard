name: Onboard New Environment

on:
  workflow_dispatch:
    inputs:
      company_name:
        description: "The name of the company or client (e.g., acme-corp)."
        required: true
      environment_name:
        description: "The name of the environment (e.g., production, staging)."
        required: true
      application_repo:
        description: "The full name of the application repository to onboard (e.g., your-org/cloudwatch-automatic-dashboard)."
        required: true
      aws_region:
        description: "AWS Region for the deployment."
        required: true
        default: "ap-southeast-1"

permissions:
  id-token: write
  contents: read

jobs:
  deploy_client_role:
    name: 1. Deploy Client Role
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.event.inputs.company_name }}-${{ github.event.inputs.environment_name }}
    outputs:
      deployment_role_arn: ${{ steps.get_role_arn.outputs.role_arn }}
      project_identifier: ${{ steps.load_config.outputs.project_identifier }}

    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@v2
        with:
          egress-policy: audit # Monitor Traffic

      # Checks out the specified application repository to read its config
      - name: Checkout Application Repository
        uses: actions/checkout@v4
        with:
          repository: ${{ github.event.inputs.application_repo }}
          path: app

      - name: Parse Account ID from Role ARN
        id: parse_arn
        run: |
          ACCOUNT_ID=$(echo "${{ secrets.MANAGEMENT_CONNECTOR_ROLE_ARN }}" | cut -d ':' -f 5)
          echo "ACCOUNT_ID=$ACCOUNT_ID" >> $GITHUB_ENV

      # This new step reads the project identifier from the app's config.json
      - name: Load Project Identifier from Config
        id: load_config
        working-directory: ./app
        run: |
          COMPOSITE_ENV_NAME="${{ github.event.inputs.company_name }}-${{ github.event.inputs.environment_name }}"
          PROJECT_ID=$(jq -r --arg TARGET_ENV "$COMPOSITE_ENV_NAME" '.[$TARGET_ENV].project_identifier' config.json)
          echo "project_identifier=$PROJECT_ID" >> $GITHUB_OUTPUT

      - name: Configure AWS Credentials for Target Account
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.MANAGEMENT_CONNECTOR_ROLE_ARN }}
          aws-region: ${{ github.event.inputs.aws_region }}

      - name: Deploy client.yaml
        id: deploy
        run: |
          STACK_NAME="${{ github.event.inputs.company_name }}-${{ github.event.inputs.environment_name }}-${{ steps.load_config.outputs.project_identifier }}-client"
          TOOLING_ROLE_ARN="${{ secrets.CENTRAL_TOOLING_ROLE_ARN }}"
          aws cloudformation deploy \
            --template-file client.yaml \
            --stack-name "$STACK_NAME" \
            --parameter-overrides ToolingRoleArn=$TOOLING_ROLE_ARN \
            --capabilities CAPABILITY_IAM \
            --no-fail-on-empty-changeset
          echo "stack_name=$STACK_NAME" >> $GITHUB_ENV

      - name: Get Deployment Role ARN
        id: get_role_arn
        run: |
          ROLE_ARN=$(aws cloudformation describe-stacks \
            --stack-name ${{ env.stack_name }} \
            --query "Stacks[0].Outputs[?OutputKey=='InternalToolingDeploymentRoleArn'].OutputValue" \
            --output text)
          echo "role_arn=$ROLE_ARN" >> $GITHUB_OUTPUT

  create_ssm_parameter:
    name: 2. Create SSM Parameter Link
    runs-on: ubuntu-latest
    needs: deploy_client_role

    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@v2

      - name: Configure AWS Credentials for Tooling Account
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.TOOLING_ACCOUNT_OIDC_ROLE_ARN }}
          aws-region: ${{ github.event.inputs.aws_region }}

      - name: Create SSM Parameter
        run: |
          # This now dynamically constructs the full path using the project_identifier
          PROJECT_ID="${{ needs.deploy_client_role.outputs.project_identifier }}"
          PARAMETER_NAME="/github/${{ github.event.inputs.company_name }}/${{ github.event.inputs.environment_name }}/${PROJECT_ID}/role-arn"
          ROLE_ARN="${{ needs.deploy_client_role.outputs.deployment_role_arn }}"

          aws ssm put-parameter \
            --name "$PARAMETER_NAME" \
            --value "$ROLE_ARN" \
            --type "SecureString" \
            --overwrite
