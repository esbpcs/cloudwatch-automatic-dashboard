name: Validate and Deploy Resource

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:
    inputs:
      target-environment:
        description: "Select the environment to deploy to"
        required: true
        type: choice
        options:
          - development
          - staging
          - production

jobs:
  validate-code:
    name: Lint, Test, and Deep Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@63c24ba6bd7ba022e95695ff85de572304a18142 # v2.7.0

      - name: Checkout repository
        uses: actions/checkout@a12a3943b4e8c8ea41ed3efaed7189cda9389c19 # v4.0.0

      - name: Set up Python
        uses: actions/setup-python@82c7e631bb3cdc910f68e0081d67478d79c6982d # v5.1.0

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi

      - name: Set up Ruby for cfn-nag
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.1"

      - name: Install cfn-nag
        run: gem install cfn-nag

      - name: Run Code Quality and Formatting Checks
        run: |
          black --check .
          isort --check-only --profile black .
          flake8 .

      - name: Lint CloudFormation Templates
        run: cfn-lint *.yaml OIDC/*.yaml

      - name: Scan CloudFormation for Security
        run: cfn_nag_scan --input-path . --fail-on-warnings

      - name: Advanced SAST Scan (Semgrep)
        uses: semgrep/semgrep-action@v2
        with:
          config: >-
            p/python
            p/boto3
            p/owasp-top-ten
            p/secrets

      - name: Scan Dependencies for Vulnerabilities (OSV-Scanner)
        uses: google/osv-scanner-action@v1.7.0
        with:
          scan-args: -r .

      - name: Run Unit Tests
        run: pytest lambda/

  deploy-to-aws:
    name: Deploy to ${{ github.event.inputs.target-environment || 'development' }}
    runs-on: ubuntu-latest
    needs: validate-code
    if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || github.event_name == 'workflow_dispatch'

    environment:
      name: ${{ github.event.inputs.target-environment || 'development' }}

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@63c24ba6bd7ba022e95695ff85de572304a18142 # v2.7.0

      - name: Checkout repository
        uses: actions/checkout@a12a3943b4e8c8ea41ed3efaed7189cda9389c19 # v4.0.0

      - name: Determine Target Environment
        run: |
          TARGET_ENV=${{ github.event.inputs.target-environment || 'development' }}
          echo "TARGET_ENV=${TARGET_ENV}" >> $GITHUB_ENV

      - name: Load Config and Generate Parameters
        id: load_config
        run: |
          CONFIG_JSON=$(cat config.json | jq -r --arg TARGET_ENV "$TARGET_ENV" '.[$TARGET_ENV]')
          OVERRIDES=$(echo "$CONFIG_JSON" | jq -r 'to_entries | .[] | select(.key != "ssm_parameter_for_role" and .key != "aws_region") | .key + "=" + (.value|tostring)' | tr '\n' ' ')

          echo "overrides_string=$OVERRIDES" >> $GITHUB_OUTPUT
          echo "ssm_param_name=$(echo "$CONFIG_JSON" | jq -r '.ssm_parameter_for_role')" >> $GITHUB_ENV
          echo "stack_name=$(echo "$CONFIG_JSON" | jq -r '.cloudformation_stack_name')" >> $GITHUB_ENV
          echo "aws_region=$(echo "$CONFIG_JSON" | jq -r '.aws_region')" >> $GITHUB_ENV
          echo "s3_bucket=$(echo "$CONFIG_JSON" | jq -r '.s3_bucket_for_artifacts')" >> $GITHUB_ENV
          echo "s3_key=function-${{ github.sha }}.zip" >> $GITHUB_ENV

      - name: Assume Role in Tooling Account (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.TOOLING_ACCOUNT_OIDC_ROLE_ARN }}
          aws-region: ${{ env.aws_region }}

      - name: Get Target Deployment Role ARN from SSM
        id: get_role
        run: |
          TARGET_ROLE_ARN=$(aws ssm get-parameter --name "${{ env.ssm_param_name }}" --query "Parameter.Value" --output text)
          echo "aws_role_to_assume=${TARGET_ROLE_ARN}" >> $GITHUB_ENV

      - name: Assume Final Deployment Role in Target Account
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.aws_role_to_assume }}
          aws-region: ${{ env.aws_region }}
          role-session-name: GitHubActions-DashboardDeploy-${{ github.run_id }}

      - name: Package and Upload Versioned Artifact
        run: |
          cd lambda
          zip -r ../${{ env.s3_key }} .
          aws s3 cp ../${{ env.s3_key }} s3://${{ env.s3_bucket }}/${{ env.s3_key }}

      - name: Deploy CloudFormation Stack
        run: |
          aws cloudformation deploy \
            --template-file deployer.yaml \
            --stack-name ${{ env.stack_name }} \
            --parameter-overrides ${{ steps.load_config.outputs.overrides_string }} LambdaCodeS3Key=${{ env.s3_key }} \
            --capabilities CAPABILITY_IAM \
            --no-fail-on-empty-changeset
